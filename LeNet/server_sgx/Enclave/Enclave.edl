/*
 * Copyright (C) 2011-2021 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/* Enclave.edl - Top EDL file. */

enclave {
    
    include "user_types.h" /* buffer_t */

    /* Import ECALL/OCALL from sub-directory EDLs.
     *  [from]: specifies the location of EDL file. 
     *  [import]: specifies the functions to import, 
     *  [*]: implies to import all functions.
     */
    
    from "Edger8rSyntax/Types.edl" import *;
    from "Edger8rSyntax/Pointers.edl" import *;
    from "Edger8rSyntax/Arrays.edl" import *;
    from "Edger8rSyntax/Functions.edl" import *;
    from "sgx_pthread.edl" import *;
    from "sgx_tstdc.edl" import *;

    from "TrustedLibrary/Libc.edl" import *;
    from "TrustedLibrary/Libcxx.edl" import ecall_exception, ecall_map;
    from "TrustedLibrary/Thread.edl" import *;
  //  from "hybrid_sgx/sgx_scalar.edl" import * ; // the import would cause undefined "trusted" error at Enclave.edl

    /* 
     * ocall_print_string - invokes OCALL to display string buffer inside the enclave.
     *  [in]: copy the string buffer to App outside.
     *  [string]: specifies 'str' is a NULL terminated buffer.
     */

    trusted{
    /*Scalar SGX interface*/
        public void Scalar_SGX([out, count = 1] uint64_t *_data);
        public void Scalar_SGX_val([out, count = 1] uint64_t *_data, [in] uint64_t * val);
        public void Scalar_SGX_size([out, count =1] size_t * size, [in] uint64_t * _data);
        public void Scalar_SGX_set([out] uint64_t * _data, [in,count=1] uint64_t * val);
        public void Scalar_SGX_test();
        public void relu_sgx([out,count=n] double *data_out,[in,count=n] double *data_in, size_t n);
        public void grad_relu_sgx([out,count=n] double *data_out,[in,count=n] double *data_in, size_t n);
        public void maxpool_2_sgx([out, count=n_out] double* data_out, [in,count=n_in] double *data_in,[in, count=4] int* shape_sgx, size_t n_out, size_t n_in);
        public void grad_maxpool_2_sgx([in, count=n_out] double* data_outerror, [out,count=n_in] double *data_inerror,[in,count=n_in] double *data_input,[in, count=4] int* shape_input, size_t n_out, size_t n_in);
        public void test();
};
    untrusted {
        void ocall_print_string([in, string] const char *str);
        void start_timer();
		void stop_timer();
    };

};
